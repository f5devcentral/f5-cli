image: python:3.7

stages:
    - test
    - test_functional
    - test_functional_teardown
    - docs
    - publish
    - publish_test

variables:
    DOCS_BUILD_DIR: "code_docs/html"
    FUNCTIONAL_TEST_PREFIX: 'f5clitest'
    GIT_SECRETS_VERSION: '1.3.0'
    GIT_SECRETS_PKG_URL: "https://github.com/awslabs/git-secrets/archive/${GIT_SECRETS_VERSION}.tar.gz"
    TERRAFORM_PKG_URL: 'https://releases.hashicorp.com/terraform/0.11.14/terraform_0.11.14_linux_386.zip'
    TWINE_USERNAME: "$PYPI_USERNAME"
    TWINE_PASSWORD: "$PYPI_PASSWORD"
    TWINE_NON_INTERACTIVE: "true"
    PRIMARY_DEMO_DIR: demos/primary
    # normalize env var options between ansible and terraform
    AZURE_TENANT: "$AZURE_TENANT_ID"
    AZURE_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_CLIENT_ID: "$AZURE_CLIENT_ID"
    ARM_CLIENT_SECRET: "$AZURE_CLIENT_SECRET"
    ARM_SUBSCRIPTION_ID: "$AZURE_SUBSCRIPTION_ID"
    ARM_TENANT_ID: "$AZURE_TENANT_ID"
    # F5 sdk environment variables
    F5_SDK_LOG_LEVEL: "INFO"
    F5_DISABLE_SSL_WARNINGS: 'true'
    # disable analytics during functional test
    F5_ALLOW_ANALYTICS: "false"

# unit tests: python 3.x (preferred)
test_unit:
    stage: test
    script:
        # install packages
        - pip3 install -r requirements.txt && pip3 install .
        # run unit tests
        - make unit_test
        # run linter
        - make lint
    tags:
        - cm-official-docker-executor

# dependency security check
test_security_check:
    stage: test
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # run dependency check
        - safety check -r requirements.txt
    tags:
        - cm-official-docker-executor

# check for disallowed content within any file in source control, this
# supplements the native pre-receive push rules built into GitLab for secrets
# note: .gitallowed is used for exceptions
check_content:
    image: f5devcentral/containthedocs:rpmbuild
    stage: test
    script:
        # install git-secrets
        - curl -q -L -o git_secrets.tar.gz ${GIT_SECRETS_PKG_URL}
        - tar xzf git_secrets.tar.gz
        - cd git-secrets-${GIT_SECRETS_VERSION} && make install && cd ..
        # now, add any patterns to disallow
        - git secrets --add '.*f5.*\.com'
        # scan
        - git secrets --scan
    tags:
        - cm-official-docker-executor

# functional tests: demo (ansible variation)
test_functional:
    stage: test_functional
    script:
        # install CLI
        - pip3 install -r requirements.txt && pip3 install .
        # install packages - ansible
        - cd ${PRIMARY_DEMO_DIR}/ansible
        - pip3 install -r requirements.txt
        # environment vars
        - export ADMIN_PWD=$(openssl rand 12 | base64)'Ul!'
        # run ansible playbook
        - ansible-playbook main.yml -e "admin_password=${ADMIN_PWD}" -e "env_prefix=${FUNCTIONAL_TEST_PREFIX}" -v
    tags:
        - cm-official-docker-executor
    only:
        variables:
            # uncomment below, once functional testing is officially added
            # - $CI_COMMIT_REF_NAME == "master"
            # - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/

# functional tests: demo (terraform variation)
test_functional_tf:
    stage: test_functional
    script:
        # install CLI
        - pip3 install -r requirements.txt && pip3 install .
        # install packages - terraform
        - cd ${PRIMARY_DEMO_DIR}/terraform
        - curl ${TERRAFORM_PKG_URL} -o terraform.zip -vvv && unzip terraform.zip && export PATH="$PATH:$(pwd)"
        - terraform init
        # environment vars
        - export ADMIN_PWD=$(openssl rand 12 | base64)'Ul!'
        # run terraform plan
        - terraform apply -var="env_prefix=${FUNCTIONAL_TEST_PREFIX}tf" -var="admin_password=${ADMIN_PWD}" -auto-approve
    tags:
        - cm-official-docker-executor
    only:
        variables:
            # uncomment below, once functional testing is officially added
            # - $CI_COMMIT_REF_NAME == "master"
            # - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/
    # terraform destroy command needs the state from apply
    artifacts:
        paths:
            - "${PRIMARY_DEMO_DIR}/terraform/terraform.tfstate"
        expire_in: 1 day
        when: always

# functional tests: demo teardown (ansible variation)
test_functional_teardown:
    stage: test_functional_teardown
    script:
        # install CLI
        - pip3 install -r requirements.txt && pip3 install .
        # install packages - ansible
        - cd ${PRIMARY_DEMO_DIR}/ansible
        - pip3 install -r requirements.txt
        # tear down environment
        - ansible-playbook teardown.yml -e "env_prefix=${FUNCTIONAL_TEST_PREFIX}" -v
    tags:
        - cm-official-docker-executor
    when: always
    only:
        variables:
            # uncomment below, once functional testing is officially added
            # - $CI_COMMIT_REF_NAME == "master"
            # - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/

# functional tests: demo teardown (terraform variation)
test_functional_teardown_tf:
    stage: test_functional_teardown
    script:
        # install CLI
        - pip3 install -r requirements.txt && pip3 install .
        # install packages - terraform
        - cd ${PRIMARY_DEMO_DIR}/terraform
        - curl ${TERRAFORM_PKG_URL} -o terraform.zip -vvv && unzip terraform.zip && export PATH="$PATH:$(pwd)"
        - terraform init
        # tear down environment
        - terraform destroy -var="env_prefix=${FUNCTIONAL_TEST_PREFIX}tf" -var="admin_password=value" -auto-approve
    tags:
        - cm-official-docker-executor
    when: always
    only:
        variables:
            # uncomment below, once functional testing is officially added
            # - $CI_COMMIT_REF_NAME == "master"
            # - $CI_COMMIT_REF_NAME == "develop"
            - $RUN_FUNCTIONAL_TESTS == "true"
            - $CI_COMMIT_MESSAGE =~ /smart:run_functional_tests/

# generate code coverage docs
docs_code_coverage:
    stage: docs
    script:
        # install packages
        - pip3 install -r requirements.txt && pip3 install .
        # generate coverage
        - make coverage
    tags:
        - cm-official-docker-executor
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_code_coverage
        paths:
            - code_coverage
        expire_in: 1 month

# generate code docs
docs_code:
    stage: docs
    script:
        # install packages
        - pip install -r requirements.txt
        - pip install .
        # generate docs
        - make code_docs
    tags:
        - cm-official-docker-executor
    artifacts:
        name: ${CI_COMMIT_REF_NAME}_code_docs
        paths:
            - code_docs
        expire_in: 1 month

# Publish to internal artifactory
# Note: Will build and push package when new tags are added with
# the assumption being the package version has been updated.
# However even if it hasn't it will simply update the existing version
publish_egg_to_artifactory:
    stage: publish
    only:
        - tags
    tags:
        - docker-executor
    script:
        - make build
        - EGG_FILE=$(ls dist/*.gz)
        - EGG_NAME=$(basename $EGG_FILE)
        - URL=${ARTIFACTORY_BASE_URL}/f5-cloud-solutions-pypi/f5-cli/${EGG_NAME}
        - echo ${URL}
        - >-
          UPLOAD_RESULT=$(curl -H "Authorization: Bearer ${ARTIFACTORY_TOKEN}" -X PUT --data-binary @${EGG_FILE} ${URL})
        - if [[ $? -eq 0 ]] && [[ "$UPLOAD_RESULT" == *created* ]]; then echo "Upload complete"; else echo "Upload failed"; exit 1; fi
        - echo $UPLOAD_RESULT

# Publish to PyPI
# Note: Will build and push package when new tags are added with
# the assumption being the package version has been updated
publish_package_to_pypi:
    stage: publish
    only:
        - tags
    tags:
        - docker-executor
    script:
        # install packages
        - pip install -r requirements.txt
        # upload
        - make upload

# publish docs to internal pages: - this job MUST be named 'pages'
pages:
    stage: publish
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "develop"
    tags:
        - cm-official-docker-executor
    script:
        - PUBLIC_DIR='./public'
        - mkdir -p ${PUBLIC_DIR}
        # place index.html in public dir
        - cp docs/index.html ${PUBLIC_DIR}/index.html
        # place code coverage artifacts under /coverage
        - mkdir -p ${PUBLIC_DIR}/coverage
        - cp -R code_coverage/* ${PUBLIC_DIR}/coverage
        # place code docs artifacts under /code-docs
        - mkdir -p ${PUBLIC_DIR}/code-docs
        - cp -R ${DOCS_BUILD_DIR}/* ${PUBLIC_DIR}/code-docs
    artifacts:
        paths:
            - public

# Publish docs to clouddocs.f5networks.com
docs_to_staging:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: stage
        url: https://clouddocs.f5networks.net/sdk/f5-cli
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "develop"
            - $CI_COMMIT_REF_NAME == "docs_staging"
    tags:
        - cm-official-docker-executor
    script:
        - aws configure set aws_access_key_id $DOCS_AWS_ACCESS_KEY_ID --profile=docs
        - aws configure set aws_secret_access_key $DOCS_AWS_SECRET_ACCESS_KEY --profile=docs
        # Uncomment and set to create desired version format
        - aws s3 sync ${DOCS_BUILD_DIR} s3://clouddocs.f5networks.net/sdk/f5-cli --profile=docs
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST_STAGE --paths /sdk/f5-cli --profile=docs

# Publish docs to clouddocs.f5.com
docs_to_production:
    image: ${CONTAINTHEDOCS_IMAGE}
    stage: publish
    environment:
        name: stage
        url: https://clouddocs.f5.com/sdk/f5-cli
    only:
        variables:
            - $CI_COMMIT_REF_NAME == "master"
            - $CI_COMMIT_REF_NAME == "docs_production"
    tags:
        - cm-official-docker-executor
    script:
        - aws configure set aws_access_key_id $DOCS_AWS_ACCESS_KEY_ID --profile=docs
        - aws configure set aws_secret_access_key $DOCS_AWS_SECRET_ACCESS_KEY --profile=docs
        # Uncomment and set to create desired version format
        - aws s3 sync ${DOCS_BUILD_DIR} s3://clouddocs.f5.com/sdk/f5-cli --profile=docs
        # create invalidation to clear cloudfront cache
        - aws cloudfront create-invalidation --distribution-id $AWS_DIST_STAGE --paths /sdk/f5-cli --profile=docs

# publish test: test internal (artifactory) install
publish_test_internal_install:
    stage: publish_test
    only:
        - tags
    script:
        # install package - first wait until it is available after a recent publish (known artifactory issue)
        - bash scripts/wait_for_resp.sh ${ARTIFACTORY_BASE_URL}/api/pypi/f5-cloud-solutions-pypi/simple/f5-cli/
        - pip install f5-cli --extra-index-url ${ARTIFACTORY_BASE_URL}/api/pypi/f5-cloud-solutions-pypi/simple
    tags:
        - cm-official-docker-executor

# publish test: test public (pypi) install
publish_test_public_install:
    stage: publish_test
    only:
        - tags
    script:
        # install package
        - pip install f5-cli
    tags:
        - cm-official-docker-executor